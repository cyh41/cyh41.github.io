{"meta":{"title":"south-park","subtitle":null,"description":"screw you guys I'm going home","author":"cyh41","url":"https://cyh41.github.io","root":"/"},"pages":[{"title":"Categories","date":"2019-03-22T15:58:29.000Z","updated":"2019-03-22T16:25:06.029Z","comments":true,"path":"categories/index.html","permalink":"https://cyh41.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-03-22T16:05:04.000Z","updated":"2019-03-22T16:25:09.997Z","comments":true,"path":"tags/index.html","permalink":"https://cyh41.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"What's up Vue -属性-attrs","slug":"What-s-up-Vue-属性-attrs","date":"2019-04-20T09:16:01.000Z","updated":"2019-07-22T15:39:23.012Z","comments":true,"path":"2019/04/20/What-s-up-Vue-属性-attrs/","link":"","permalink":"https://cyh41.github.io/2019/04/20/What-s-up-Vue-属性-attrs/","excerpt":"","text":"preface在讲 attrs 之前，先简单介绍一下 组件的三大核心概念。 分别是：属性、事件、插槽。 这三大核心概念是vue组件的支撑，我会作为这个系列的第一个重点来讲，并且会在后面详细介绍。 这篇主要就是讲解一下 属性 中的 attrs。 文中代码基本上只展示关键部分 属性首先 vue当中，属性分为了三类 自定义属性props，常用于父子组件之前的通信 原生属性attrs，属于 当子组件没有接收（props中没声明）其属性，则该属性会自动挂载到组件根元素上 特殊属性不多说了吧 Attrs（原生属性）inheritAttrs 默认情况下 父组件传递个属性给子组件 子组件中未在props中声明该属性，同时不设置 inheritAttrs到false 该属性则作为普通的 HTML 特性 应用在子组件的根元素上 话不多B，直接上code 父组件在 子组件上加了一个 自定义属性 text 123456789101112131415&lt;!--父组件--&gt;&lt;template&gt; &lt;!-- 子组件child-component --&gt; &lt;child-component text=\"inheritAttrs默认为true\" class=\"parent-class\" :style=\"&#123;color:'#000'&#125;\"&gt;&lt;/child-component&gt;&lt;/template&gt;&lt;script&gt;import ChildComponent from \"@/components/ChildComponent.vue\";export default &#123;name: \"parentComponent\",components: &#123; ChildComponent&#125;&#125;;&lt;/script&gt; 子组件内部没有用props声明该属性，同时inheritAttrs不为false。 1234567891011121314&lt;!--子组件--&gt;&lt;template&gt; &lt;div&gt; 我是子组件 &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: \"ChildComponent\" // inheritAttrs:true, // props:&#123;&#125;&#125;;&lt;/script&gt; 默认inheritAttrs，或inheritAttrs为true inheritAttrs为false，text属性不见了，class跟style依然挂载 虽然inheritAttrs:false阻止了 原生属性默认挂载在跟元素上的特性（非 class 和 style ），但是我们依然可以通过vm.$attrs 这个实例属性去访问到（访问不到class和style）。 1234567891011121314&lt;!--子组件--&gt;&lt;!--省略html--&gt;&lt;script&gt;export default &#123; name: \"childComponent\" inheritAttrs:false, // props:&#123;&#125; create()&#123; //可以直接访问得到所有的原生属性 console.log(this.$attrs) &#125;&#125;;&lt;/script&gt; 简单来说inheritAttrs:false可以避免通信的数据直接暴露在html上，而$attrs的妙用不仅仅如此 场景实例有这么一个场景（父=&gt;子=&gt;孙的通信），你需要通过修改父组件的属性去更新孙组件。这里是需 要把input的类型改为 button。 123456&lt;!--父组件--&gt;&lt;!-- 子组件child-component --&gt; &lt;child-component type=\"button\"&gt;&lt;/child-component&gt;&lt;!--省略script--&gt; 1234567&lt;!--子组件--&gt;&lt;div&gt;&lt;!-- 孙组件grand-component --&gt; &lt;grand-component&gt;&lt;/grand-component&gt;&lt;/div&gt;&lt;!--省略script--&gt; 123&lt;!--孙组件 孙子孙女,whatever--&gt; &lt;input vlaue=\"我其实是一个按钮\"&gt;&lt;!--省略script--&gt; Props方法 层层传递法，每层用props接收。 12345678910111213&lt;!--子组件--&gt;&lt;!-- 传递type给孙组件 --&gt;&lt;grand-component :type=\"type\"&gt;&lt;/grand-component&gt; &lt;script&gt; export default &#123; props:&#123; //接收 父组件传递的属性type type:String &#125; &#125;; &lt;/script&gt; 12345678910111213&lt;!--孙组件--&gt;&lt;!-- 祖父传的type，经过重重传递，终于传过来了 --&gt;&lt;input :type=\"type\"&gt; &lt;script&gt; export default &#123; props:&#123; //接收 子组件（这里是父组件）接收父组件（这里是祖父组件）传递的type，是不是晕了？晕就对了，这才跨了一层，如果跨N层呢？ type:String &#125; &#125;; &lt;/script&gt; $attrs方法 只需在中间层配置1234567891011&lt;!--子组件--&gt;&lt;!-- 将$attrs直接传递给孙组件，我甚至不需要知道$attrs里面有什么 --&gt;&lt;grand-component v-bind=\"$attrs\"&gt;&lt;/grand-component&gt; &lt;script&gt; export default &#123; inheritAttrs:false, //我不希望html里面有我的数据 //props:&#123;&#125; 不需要props了 &#125;; &lt;/script&gt; Ok，就这样了，孙组件不用改动，就可以直接生效。虽然说两种方法都能解决跨组件通信，但是明显 $attrs 代码量少、维护性更高。 $attrs这里有几个地方需要注意：1.当孙组件中已经拥有了该属性，会被祖父传递的属性覆盖2.class和style依然无效，不能通过此方法给孙子传递3.不能将 v-bind=&quot;$attrs&quot;缩写为:$attrs4.$attrs的应用场景不多，仅限于应用在子组件的根元素上","categories":[{"name":"frontEnd","slug":"frontEnd","permalink":"https://cyh41.github.io/categories/frontEnd/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://cyh41.github.io/tags/vue/"}]}]}