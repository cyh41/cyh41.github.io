<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>south-park</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cyh41.github.io/"/>
  <updated>2019-09-25T08:41:27.692Z</updated>
  <id>https://cyh41.github.io/</id>
  
  <author>
    <name>cyh41</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack-基础配置与多环境配置</title>
    <link href="https://cyh41.github.io/2019/09/24/webpack-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://cyh41.github.io/2019/09/24/webpack-基础配置与多环境配置/</id>
    <published>2019-09-24T01:32:44.000Z</published>
    <updated>2019-09-25T08:41:27.692Z</updated>
    
    <content type="html"><![CDATA[<p><center><img src="/2019/09/24/webpack-基础配置与多环境配置/webpack.svg" alt="webpack"></center></p><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>webpack 是个 <strong>模块打包器</strong>。从配置的入口进入，找寻所有相关依赖。并将所有依赖打包成一个或多个 <em>bundle</em>。</p><p>webpack默认支持 <code>common.js</code> 规范和 <code>es6</code> 规范。</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>从4.0开始，需要同时安装 <code>webpack-cli</code> ，用来解析命令行后的参数。</p><p>只需在开发环境中安装使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure><p>在<code>package.json</code>配置<code>scripts</code>既可使用。</p><p>以下，打包有两种方法，一种是 <code>dev</code>模式（基本用不到），一种是<code>prod</code>模式。webpack4.0的config会根据<code>mode</code> 判断当前命令是在开发环境执行还是生产环境。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts":&#123;</span><br><span class="line">  "dev-build": "webpack --mode development"</span><br><span class="line">  "build": "webpack --mode produciton"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区分环境配置"><a href="#区分环境配置" class="headerlink" title="区分环境配置"></a>区分环境配置</h2><p>在开发过程中，为了更灵活的配置不同的环境，可以引入一个<strong>变量</strong>来区分不同的环境。并且通过 <code>--config</code> 设置需要访问的配置文件。</p><p>script中的命令，会找 <code>node_modules</code> 下的 <code>.bin</code> 目录进行执行。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts":&#123;</span><br><span class="line">  "dev-build": "webpack --env.development --config ./build/webpack.base.js",</span><br><span class="line">  </span><br><span class="line">  "build": "webpack --env.produciton --config ./build/webpack.base.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在根目录新建 <code>build</code>文件夹，内部新建</p><ul><li>公共配置 <code>webpack.base.js</code></li><li>开发环境 <code>webpack.dev.js</code></li><li>生产环境 <code>webpack.prod.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**webpack.base.js*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入开发和生产的配置config</span></span><br><span class="line"><span class="keyword">const</span> dev = <span class="built_in">require</span>(<span class="string">'./webpack.dev'</span>);</span><br><span class="line"><span class="keyword">const</span> prod = <span class="built_in">require</span>(<span class="string">'./webpack.pro'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//插件：用来合并base.config和当前环境的config</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isDev = env.development;<span class="comment">//是否是开发环境</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> base = &#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span>公共配置</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//根据环境选择不同的config配置，这里只配置了两种常用环境</span></span><br><span class="line">  <span class="keyword">return</span> isDev ? merge(base,dev) : merge(base,prod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p><code>webpack-dev-server</code> 用于本地开发环境下，可以热更新，而无需重复打包。它打包在内存当中，而不是磁盘中。默认访问项目的根目录。</p><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>配置脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>:&#123;</span><br><span class="line">  <span class="string">"serve"</span>: <span class="string">"webpack-dev-server --env.development --config ./build/webpack.base.js"</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"webpack --env.produciton --config ./build/webpack.base.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置config</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**webpack.dev.js*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode:<span class="string">'development'</span>,</span><br><span class="line">  </span><br><span class="line">  devServer:&#123;</span><br><span class="line">    port:<span class="number">8080</span>,</span><br><span class="line">    compress:<span class="literal">true</span>,<span class="comment">//是否压缩</span></span><br><span class="line">    contentBase:path.resolve(__dirname,<span class="string">'../dist'</span>)<span class="comment">//告诉服务器从哪个目录中提取内容</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="webpack基础配置"><a href="#webpack基础配置" class="headerlink" title="webpack基础配置"></a>webpack基础配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**webpack.base.js*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dev = <span class="built_in">require</span>(<span class="string">'./webpack.dev'</span>);</span><br><span class="line"><span class="keyword">const</span> prod = <span class="built_in">require</span>(<span class="string">'./webpack.pro'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">const</span> isDev = env.development;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">const</span> base = &#123;</span><br><span class="line">      <span class="comment">//配置入口指引webpack启动，路径需要绝对路径</span></span><br><span class="line">      entry:path.resolve(__dirname,<span class="string">'../src/index'</span>),<span class="comment">//单文件</span></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      *多文件打包</span></span><br><span class="line"><span class="comment">      *entry:&#123;</span></span><br><span class="line"><span class="comment">      *home: './home.js',</span></span><br><span class="line"><span class="comment">      *about: './about.js',</span></span><br><span class="line"><span class="comment">      *contact: './contact.js'</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//配置打包的出口</span></span><br><span class="line">      output:&#123;</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">        <span class="comment">//filename:'[name].bundle.js', name值会根据多入口的name配置</span></span><br><span class="line">        <span class="comment">//filename: '[name].[hash].bundle.js',has打包模式</span></span><br><span class="line">        </span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'../dist'</span>)<span class="comment">//打包的出口</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;center&gt;&lt;img src=&quot;/2019/09/24/webpack-基础配置与多环境配置/webpack.svg&quot; alt=&quot;webpack&quot;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;head
      
    
    </summary>
    
      <category term="front-end" scheme="https://cyh41.github.io/categories/front-end/"/>
    
    
      <category term="What&#39;s up webpack" scheme="https://cyh41.github.io/tags/What-s-up-webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue-双向绑定与事件(下)</title>
    <link href="https://cyh41.github.io/2019/09/21/vue-%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E4%B8%8E%E4%BA%8B%E4%BB%B6(%E4%B8%8B)/"/>
    <id>https://cyh41.github.io/2019/09/21/vue-双向绑定与事件(下)/</id>
    <published>2019-09-21T03:06:10.000Z</published>
    <updated>2019-09-21T07:43:18.708Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/09/21/vue-双向绑定与事件(下)/1004495.jpg" alt="1004495"></p><h2 id="非表单元素实现双向绑定"><a href="#非表单元素实现双向绑定" class="headerlink" title="非表单元素实现双向绑定"></a><strong>非表单元素实现双向绑定</strong></h2><h3 id="dialog组件"><a href="#dialog组件" class="headerlink" title="dialog组件"></a>dialog组件</h3><p>这里封装一个简易的 Dialog ，需要实现 </p><ol><li>父组件可以操作显示与否</li><li>2.Dialog组件可以自行隐藏</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--home.vue --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--dialog组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible</span>=<span class="string">"visible"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"switchVisible(!visible)"</span>&gt;</span>切换弹窗显隐<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">'home'</span>,</span></span><br><span class="line"></span><br><span class="line">  methods:&#123;</span><br><span class="line"><span class="actionscript">    switchVisible(visible=<span class="literal">false</span>)&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.visible = visible</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="actionscript">      visible:<span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- style部分略--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--el-dialog.vue --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal"</span> <span class="attr">:style</span>=<span class="string">"&#123;display: visible ? 'block' : 'none'&#125;"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleHide"</span>&gt;</span>隐藏弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">'el-dialog'</span>,</span></span><br><span class="line">  </span><br><span class="line">  props:&#123;</span><br><span class="line"><span class="javascript">    visible:<span class="built_in">Boolean</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  methods:&#123;</span><br><span class="line"><span class="actionscript">    <span class="comment">/**隐藏弹窗*/</span></span></span><br><span class="line">    handleHide()&#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">//<span class="doctag">TODO:</span>这里应该怎么写呢</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- style部分略--&gt;</span></span><br></pre></td></tr></table></figure><p>这么写可以实现 home组件内 可以切换 dialog组件的显隐。但是弹窗组件内部应该怎么去操作  <code>visible</code> 呢？</p><p>或许你会想说这没做。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**隐藏弹窗*/</span></span><br><span class="line">handleHide()&#123;</span><br><span class="line">  <span class="keyword">this</span>.visible = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在上篇 有说过，vue其实是单数据流。在官网prop的知识点当中也有说过避免子组件直接操作父组件传递的prop的值，这样会导致你的数据流向难于理解。比如说如果一个通用组件被一个组件所复用，那么值的改变会变得非常混乱。</p><p>参考上篇的 <code>v-model</code> 的组件通信用法，我们同样可以把该方法的原理用在非表单组件的通信上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--home.vue--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--dialog组件，在上面绑定prop与event --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible</span>=<span class="string">"visible"</span> @<span class="attr">handleHide</span>=<span class="string">"switchVisible"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** dialog.vue */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**隐藏弹窗*/</span></span><br><span class="line">handleHide()&#123;</span><br><span class="line">  <span class="keyword">this</span>.$emit(<span class="string">'handleHide'</span>,<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>$emit</code> 方法在子父组件通信中非常常见。它的第一个参数值为 <code>event</code> 名，该<code>event</code> 必须在父组件调用子组件 template 的位置上有声明。该事件名我们可以称它为<strong>监听器</strong>，当触发该事件时，附加参数都会传给监听器回调。多参数传递类似 <code>apply</code>。</p></blockquote><h3 id="sync修饰符"><a href="#sync修饰符" class="headerlink" title=".sync修饰符"></a><code>.sync</code>修饰符</h3><p>为使 这个逻辑更容易理解，声明的事件更像 是个 <strong>监听器</strong>。我们可以用 <code>update:myPropName</code> 的模式去重写。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--home.vue--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--dialog组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible</span>=<span class="string">"visible"</span>      @<span class="attr">update:visible</span>=<span class="string">"switchVisible"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** dialog.vue */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**隐藏弹窗*/</span></span><br><span class="line">handleHide()&#123;</span><br><span class="line">  <span class="keyword">this</span>.$emit(<span class="string">'update:visible'</span>,<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法我们无需关心事件的名称，只需要注意需要改变的值。监听器的名称我们可以都统一用 <code>update</code>。这样的写法更加专注。如果遇到多个属性需要同时监听的时候，这么写也会优雅很多。</p><p>在使用 表单时，<code>v-model</code> 把这些prop+event进行了封装。同样，非表单元素也提供了类似的方案，那就是<code>.sync</code>修饰符。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--home.vue--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--dialog组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">"visible"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>当遇到多个一个对象中多个值需要监听的时候：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--home.vue--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--dialog组件,object = &#123;name:'zhenyizhen',age:70,sex:'unknown'&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">"object"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="listeners"><a href="#listeners" class="headerlink" title="$listeners"></a>$listeners</h3><p>回到我们前面说的 <code>event</code>。在上一篇的 自定义input组件当中。如果我们想直接通过父组件自定义input组件的方法，普通的写法会无效，需要添加<code>.native</code> ，同时input组件的根元素必须为input标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--home.vue --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 无效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> @<span class="attr">focus</span>=<span class="string">"focus"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> @<span class="attr">focus.native</span>=<span class="string">"focus"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">'home'</span>,</span></span><br><span class="line">  methods:&#123;</span><br><span class="line">    focus()&#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(focus)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同 <code>$attrs</code> 接收组件传递的属性，vue也拥有个类似的属性，用来接收方法，叫 <code>$listeners</code>（2.4.0新增）。所有未添加 <code>.native</code> 修饰符的方法，都会被存储至此。该属性也可以在  <code>beforeCreate</code> 阶段访问。在上面的例子中，如果input组件的根元素不是input标签，就可以使用此方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/09/21/vue-双向绑定与事件(下)/1004495.jpg&quot; alt=&quot;1004495&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;非表单元素实现双向绑定&quot;&gt;&lt;a href=&quot;#非表单元素实现双向绑定&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="front-end" scheme="https://cyh41.github.io/categories/front-end/"/>
    
    
      <category term="What&#39;s up Vue" scheme="https://cyh41.github.io/tags/What-s-up-Vue/"/>
    
      <category term="component communication" scheme="https://cyh41.github.io/tags/component-communication/"/>
    
  </entry>
  
  <entry>
    <title>vue-双向绑定与事件(上)</title>
    <link href="https://cyh41.github.io/2019/09/17/vue-%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E4%B8%8E%E4%BA%8B%E4%BB%B6(%E4%B8%8A)/"/>
    <id>https://cyh41.github.io/2019/09/17/vue-双向绑定与事件(上)/</id>
    <published>2019-09-17T09:47:58.000Z</published>
    <updated>2019-09-21T03:27:46.015Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/09/17/vue-双向绑定与事件(上)/fallout_4.jpg" alt="fallout_4"></p><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a><strong>Preface</strong></h2><p>1.vue的双向绑定是什么❓<br>2.v-model的原理是什么❓<br>3.为什么v-model只适用于表单元素❓<br>4.为何你这么捞❓</p><h2 id="What’s-the-v-model"><a href="#What’s-the-v-model" class="headerlink" title="What’s the v-model"></a><strong>What’s the <code>v-model</code></strong></h2><ul><li><p>普通表单元素使用 <code>v-model</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-model.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这里的值会跟input的值同步 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"checkbox"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这里的值会跟checkbox的值同步 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;checked&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"v-model"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      text: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">      checked:<span class="literal">false</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-model.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">input</span>=<span class="string">"this.text = $event.target.value"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这里的值会跟input输入的值同步 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"checkbox"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:checked</span>=<span class="string">"checked"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">change</span>=<span class="string">"checked = $event.target.checked"</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">&lt;!-- 这里的值会跟checkbox的值同步 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;checked&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"v-model"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      text: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">      checked:<span class="literal">false</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>简单来说 <code>v-model</code>就是 prop + event 的语法🍬。针对不同的表单类型，vue都会有一套不同的默认 <code>mode</code> 。</p><ul><li>text 和 textarea 元素使用  <code>value</code>  属性和  <code>input</code>  事件；</li><li>checkbox 和 radio 使用 <code>checked</code>  属性和 <code>change</code>  事件；</li><li>select 字段将  <code>value</code>  作为 prop 并将  <code>change</code>  作为事件。</li></ul></blockquote><p>这里 也很好的回答了前言的第3个问题。<em>为什么v-model只适用于表单元素?</em></p><p>因为只有表单元素会有默认的event和标准属性。不过其它元素本身就有一些不错的类似于 <code>v-model</code>的方案。</p></li><li><p>组件使用 <code>v-model</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--el-input.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">"value"</span></span></span><br><span class="line"><span class="tag">         @<span class="attr">input</span>=<span class="string">"$emit('input',$event.target.value)"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">'el-input'</span>,</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//这里其实默认配置了model</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// model: &#123;</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//   props: "value",</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//   event: "input"</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="actionscript">  props:[<span class="string">'value'</span>]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--el-checkbox.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"checkbox"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:checked</span>=<span class="string">"checked"</span></span></span><br><span class="line"><span class="tag">         @<span class="attr">change</span>=<span class="string">"$emit('change',$event.target.checked)"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">'el-checkbox'</span>,</span></span><br><span class="line">  </span><br><span class="line"><span class="actionscript">  <span class="comment">//这里需要手动声明model</span></span></span><br><span class="line">  model: &#123;</span><br><span class="line"><span class="actionscript">    props: <span class="string">"checked"</span>,</span></span><br><span class="line"><span class="actionscript">    event: <span class="string">"change"</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line"><span class="actionscript">  props:[<span class="string">'checked'</span>]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--box.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"value"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--等同于</span></span><br><span class="line"><span class="comment">    &lt;el-input :value="value" @input="value=$event.target.value"/&gt;--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--等同于</span></span><br><span class="line"><span class="comment">    &lt;el-input :checked="checked" @change="value=$event.target.checked"/&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">'box'</span>,</span></span><br><span class="line">  </span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//el-input绑定的值</span></span></span><br><span class="line"><span class="actionscript">      value:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//el-checkbox绑定的值</span></span></span><br><span class="line"><span class="actionscript">      checked:<span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过上面的🌰，其实可以很直观的看到，<code>v-model</code> 所谓的双向绑定，同样也只是个语法🍬而已，单向绑定value + 事件侦听。其实操作的都只是同一个value。</p><p>在使用  <code>v-model</code> 进行上面操作的时候有几个地方需要注意⚠️：</p><ul><li><p><code>v-model</code> 仅仅适用于表单元素</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--el-input.vue --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-model被传递到了根元素div上，此时input的操作都无效了 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">"value"</span></span></span><br><span class="line"><span class="tag">           @<span class="attr">input</span>=<span class="string">"$emit('input',$event.target.value)"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--box.vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里会把v-model传递到el-input的根元素上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>子组件中不能使用 <code>v-model</code> 绑定父组件传递的prop的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--el-input.vue --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--这里没有使用语法糖v-model</span></span><br><span class="line"><span class="comment">     &lt;input :value="value"</span></span><br><span class="line"><span class="comment">            @input="$emit('input',$event.target.value)" /&gt;--&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--如果使用v-model --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"value"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--等同于</span></span><br><span class="line"><span class="comment"> &lt;input :value="value"</span></span><br><span class="line"><span class="comment">            @input="value=$event.target.value" /&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果这么写会直接⚠️</p><p><img src="/2019/09/17/vue-双向绑定与事件(上)/image-20190920151539845.png" alt="image-20190920151539845"></p><blockquote><p>所有的 prop 都使得其父子 prop 之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p></blockquote></li></ul></li></ul><h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a><strong>conclusion</strong></h2><ol><li><p><code>v-model</code> 的本质并不是双向绑定，而是单项数据流，所操作的数据还是prop传入前的数据源。</p></li><li><p><code>v-model</code> 只适用于表单元素。因为 它 触发的 <code>$event</code> 只能访问到标签的标准属性，也就是说你只能对标准属性进行操作（如 <code>value</code>，<code>checked</code>），这里可以参考 <code>v-model</code> 相关源码。</p></li><li><p><code>v-model</code> 原理就是 prop + event。</p></li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/09/17/vue-双向绑定与事件(上)/fallout_4.jpg&quot; alt=&quot;fallout_4&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Pr
      
    
    </summary>
    
      <category term="front-end" scheme="https://cyh41.github.io/categories/front-end/"/>
    
    
      <category term="What&#39;s up Vue" scheme="https://cyh41.github.io/tags/What-s-up-Vue/"/>
    
      <category term="component communication" scheme="https://cyh41.github.io/tags/component-communication/"/>
    
  </entry>
  
  <entry>
    <title>vue-$attrs</title>
    <link href="https://cyh41.github.io/2019/08/23/vue-$attrs/"/>
    <id>https://cyh41.github.io/2019/08/23/vue-$attrs/</id>
    <published>2019-08-23T08:24:06.000Z</published>
    <updated>2019-09-20T07:33:34.856Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/08/23/vue-$attrs/78876b0a7262847ad6433024c01fc9ba.jpg" alt="78876b0a7262847ad6433024c01fc9ba"></p><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>在我们日常通信中，prop，基本可以满足业务场景中父子通信的情况。但在高级组件中，比如自己写的通用组件，二次封装element等UI框架等场景，attrs和listeners就大有作为了。</p><h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><ul><li><strong>Code</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- China.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"China"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HongKong</span> <span class="attr">where</span>=<span class="string">"China"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:money</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HongKong.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"HongKong"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      Hongkong is part of &#123;&#123;where&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      show me the money:&#123;&#123;money&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"HongKong"</span>,</span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">"where"</span>]</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>devTools</strong></li></ul><p><img src="/2019/08/23/vue-$attrs/image-20190823103936036.png" alt="image-20190823103936036"></p><ul><li><p><strong>Rendering</strong></p><p><img src="/2019/08/23/vue-$attrs/image-20190823103419658.png" alt="image-20190823103419658"></p></li></ul><blockquote><p>图中 Mustache语法<code>money</code>未在实例中找到该属性的声明，会报<code>Property or method &quot;money&quot; is not defined on the instance but referenced during render</code>错误。请确定<strong>声明</strong>后再使用。</p></blockquote><p>可以看到，父组件 传递的属性未在 子组件<code>props</code>中声明，则会默认挂载至子组件根元素上。</p><p>这是因为：未在子组件<code>props</code>中声明的属性，会被作为普通的HTML特性应用在子组件的根元素上。可以通过配置子组件<code>inheritAttrs:false</code>（2.4.0 新增）将默认行为去掉（即，在根元素中不会挂载继承属性）。但无论是否配置<code>inheritAttrs</code>，都可以通实例属性<code>$attrs</code>（2.4.0 新增）获取到。</p><blockquote><p>该属性不影响<code>class</code>和<code>style</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HongKong</span></span><br><span class="line">created()&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.$attrs)<span class="comment">//&#123;money:100&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h2><p>当我们自行封装一个简易的<code>input</code>组件，在使用过程中，可能传入不同的多个原生属性。</p><ul><li>传统<code>props</code>写法：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- box.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">:for</span>=<span class="string">"name"</span>&gt;</span>&#123;&#123;label&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">:type</span>=<span class="string">"type"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:value</span>=<span class="string">"value"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:placeholder</span>=<span class="string">"placeholder"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ElInput <span class="keyword">from</span> <span class="string">"@/components/input.vue"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    ElInput</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      label: <span class="string">"姓名"</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//要传入组件的属性</span></span></span><br><span class="line"><span class="actionscript">      name: <span class="string">"name"</span>,</span></span><br><span class="line"><span class="actionscript">      type: <span class="string">"text"</span>,</span></span><br><span class="line"><span class="actionscript">      value: <span class="string">"妮可基德曼"</span>,</span></span><br><span class="line"><span class="actionscript">      placeholder: <span class="string">"请输入姓名"</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">clas</span>=<span class="string">"el-input"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"input"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:type</span>=<span class="string">"type"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:value</span>=<span class="string">"value"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:placeholder</span>=<span class="string">"placeholder"</span></span></span><br><span class="line"><span class="tag">           @<span class="attr">input</span>=<span class="string">"handleInput"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"ElInput"</span>,</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  props: [<span class="string">"name"</span>, <span class="string">"type"</span>, <span class="string">"value"</span>, <span class="string">"placeholder"</span>],</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleInput(event) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">"input"</span>, event.target.value);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>$attrs</code>方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- box.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">:for</span>=<span class="string">"inputConfig.name"</span>&gt;</span>&#123;&#123;label&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-bind</span>=<span class="string">"inputConfig"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-model</span>=<span class="string">"value"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ElInput <span class="keyword">from</span> <span class="string">"@/components/input.vue"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    ElInput</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      label: <span class="string">"姓名"</span>,</span></span><br><span class="line"><span class="actionscript">      value: <span class="string">"nas"</span>,</span></span><br><span class="line"></span><br><span class="line">      inputConfig: &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//要传入组件的属性</span></span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"name"</span>,</span></span><br><span class="line"><span class="actionscript">        type: <span class="string">"text"</span>,</span></span><br><span class="line"><span class="actionscript">        placeholder: <span class="string">"请输入姓名"</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- input.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">clas</span>=<span class="string">"el-input"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"input"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">v-bind</span>=<span class="string">"$attrs"</span></span></span><br><span class="line"><span class="tag">           @<span class="attr">input</span>=<span class="string">"handleInput"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"ElInput"</span>,</span></span><br><span class="line"><span class="actionscript">  inheritAttrs: <span class="literal">false</span>,<span class="comment">//不加这条规则，$attrs会默认挂载到根元素上</span></span></span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleInput(event) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">"input"</span>, event.target.value);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>很明显的，<code>$attrs</code>减少了不少的代码量，整体看起来确实优雅很多，虽说<code>$attrs</code>可以代替<code>props</code>，但<code>$attrs</code>更适合原生属性或不需要处理的属性。 在很多场景下，比如要对属性进行校验、默认值、处理等操作，更建议使用<code>props</code>。每个属性都有它存在的意义，合理的运用不同属性应对不同的场景，才能发挥其最大作用。</p></blockquote><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul><li>Lifecycle</li></ul><p><code>$attrs</code>可访问的阶段是 <code>beforeCreate</code>，而<code>props</code>访问阶段为<code>created</code>。</p><ul><li><p>Render Function &amp; JSX</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//input.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'ElInput'</span>,</span><br><span class="line"></span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span>这里放jsx或render function</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleInput(event) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, event.target.value);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//render写法</span></span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, &#123;</span><br><span class="line">      class: 'el-input',</span><br><span class="line">    &#125;, [</span><br><span class="line">      h(<span class="string">'input'</span>, &#123;</span><br><span class="line">        <span class="comment">//绑定在attrs上</span></span><br><span class="line">        attrs: <span class="keyword">this</span>.$attrs,</span><br><span class="line"></span><br><span class="line">        on: &#123;</span><br><span class="line">          input: <span class="keyword">this</span>.handleInput,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ]);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jsx写法  </span></span><br><span class="line">render(h) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"el-input"</span>&gt;</span></span></span><br><span class="line">      &lt;input attrs=&#123;this.$attrs&#125; on-input=&#123;this.handleInput&#125; /&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br></pre></td></tr></table></figure></li><li><p>若 <code>v-bind=“$attrs”</code> 中的某个属性 已经有声明，则原生属性的优先级更高。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- $attrs为&#123;type:"text"&#125;，最后生效的为type="number" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/08/23/vue-$attrs/78876b0a7262847ad6433024c01fc9ba.jpg&quot; alt=&quot;78876b0a7262847ad6433024c01fc9ba&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Preface&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="front-end" scheme="https://cyh41.github.io/categories/front-end/"/>
    
    
      <category term="What&#39;s up Vue" scheme="https://cyh41.github.io/tags/What-s-up-Vue/"/>
    
      <category term="component communication" scheme="https://cyh41.github.io/tags/component-communication/"/>
    
  </entry>
  
</feed>
